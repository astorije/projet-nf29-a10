<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="cours_audio.rng" type="xml"?>
<cours_audio>
    <meta>
        <fichier_audio>NF17_cours_UML_1.mp3</fichier_audio>
        <date>11/12/2010</date>
        <url_server>http://thibaud.bourgeois.free.fr/nf29/encyclopedie/</url_server>
    </meta>
    <segment>
        <reference_plan>plan_uml.plan</reference_plan>
        <titre_segment>Présentation UML</titre_segment>
        <date_debut>00:00:00</date_debut>
        <date_fin>00:01:30</date_fin>
        <annotation>
            <titre>Définition de UML</titre>
            <contenu> 
                <paragraphe>UML (en anglais Unified Modeling Language ou « langage de modélisation unifié ») est un langage de modélisation graphique à base de pictogrammes. Il est apparu dans le monde du génie logiciel, dans le cadre de la « conception orientée objet ». Couramment utilisé dans les projets logiciels, il peut être appliqué à toutes sortes de systèmes ne se limitant pas au domaine informatique.</paragraphe>
				<paragraphe>UML est l'accomplissement de la fusion de précédents langages de modélisation objet : Booch, OMT, OOSE. Principalement issu des travaux de Grady Booch, James Rumbaugh et Ivar Jacobson, UML est à présent un standard défini par l'Object Management Group (OMG). La dernière version diffusée par l'OMG est UML 2.3 depuis mai 2010.</paragraphe>
            </contenu>
            <date_debut>00:00:00</date_debut>
            <date_fin>00:00:50</date_fin>
        </annotation>
        <annotation>
            <titre>Formalisme UML</titre>
            <contenu>
                <paragraphe>UML 2.3 propose 13 types de diagrammes (9 en UML 1.3). UML n'étant pas une méthode, leur utilisation est laissée à l'appréciation de chacun, même si le diagramme de classes est généralement considéré comme l'élément central d'UML ; des méthodologies, telles que l'UnifiedProcess, axent elles l'analyse en tout premier lieu sur les diagrammes de cas d'utilisation (Use Case). De même, on peut se contenter de modéliser seulement partiellement un système, par exemple certaines parties critiques.</paragraphe>
            </contenu>
            <date_debut>00:00:50</date_debut>
            <date_fin>00:01:30</date_fin>
        </annotation>
    </segment>
    <segment>
        <reference_plan>plan_uml.plan</reference_plan>
        <titre_segment>Diagrammes UML</titre_segment>
        <date_debut>00:01:30</date_debut>
        <date_fin>00:03:10</date_fin>
        <annotation>
            <titre>Diagrammes comportementaux</titre>
            <contenu>
                <paragraphe>Les diagrammes comportementaux (Behavior Diagram) rassemblent :
					* Diagramme des cas d'utilisation (use-cases) (cf. Use Case Diagram) : il permet d'identifier les possibilités d'interaction entre le système et les acteurs (intervenants extérieurs au système), c'est-à-dire toutes les fonctionnalités que doit fournir le système.
					* Diagramme états-transitions (cf. State Machine Diagram) : permet de décrire sous forme de machine à états finis le comportement du système ou de ses composants.
					* Diagramme d'activité (cf. Activity Diagram) : permet de décrire sous forme de flux ou d'enchaînement d'activités le comportement du système ou de ses composants.
				</paragraphe>
            </contenu>
            <date_debut>00:01:30</date_debut>
            <date_fin>00:02:20</date_fin>
        </annotation>
        <annotation>
            <titre>Diagrammes dynamiques</titre>
            <contenu>
                <paragraphe>Les diagrammes d'interaction ou dynamiques (Interaction Diagram) rassemblent :
					* Diagramme de séquence (cf. Sequence Diagram) : représentation séquentielle du déroulement des traitements et des interactions entre les éléments du système et/ou de ses acteurs.
					* Diagramme de communication (depuis UML 2.x, cf. Communication Diagram) : représentation simplifiée d'un diagramme de séquence se concentrant sur les échanges de messages entre les objets.
					* Diagramme global d'interaction (depuis UML 2.x, cf. Interaction Overview Diagram) : permet de décrire les enchaînements possibles entre les scénarios préalablement identifiés sous forme de diagrammes de séquences (variante du diagramme d'activité).
					* Diagramme de temps (depuis UML 2.x, cf. Timing Diagram) : permet de décrire les variations d'une donnée au cours du temps.
				</paragraphe>
                </contenu>
            <date_debut>00:02:20</date_debut>
            <date_fin>00:03:10</date_fin>
        </annotation>
    </segment>
	<segment>
	    <reference_plan>plan_uml.plan</reference_plan>
	    <titre_segment>Elements de modélisation</titre_segment>
        <date_debut>00:03:10</date_debut>
        <date_fin>00:04:08</date_fin>
        <annotation>
            <titre>Elements de modélisation de type commun</titre>
            <contenu>
                <paragraphe>
					Classe (Class) / Objet (Object) / Cas d'utilisation (Use case) / Paquetage (Package)
					Note (Comment) / Nœud (Node) / Fourche (Fork) / Acteur (Actor) / État (State)
					Activité (Activity) / État initial (Initial state) / État terminal (Final state) / Interface
				</paragraphe>
            </contenu>
            <date_debut>00:03:10</date_debut>
            <date_fin>00:03:40</date_fin>
        </annotation>
        <annotation>
            <titre>Elements de modélisation de type relation</titre>
            <contenu>
                <paragraphe>
					Dépendance (Dependency) / Généralisation (Generalization) / Association (Association)
					Agrégation (Aggregation) / Composition (Composition) / Réalisation / Utilisation
				</paragraphe>
            </contenu>
            <date_debut>00:03:40</date_debut>
            <date_fin>00:04:08</date_fin>
        </annotation>
    </segment>
</cours_audio>
