<?xml version="1.0" encoding="UTF-8"?><link xmlns:cont="http://utc.fr/nf29/pr/contenu" rel="stylesheet" type="text/css" href="style-article.css"/><div xmlns:cont="http://utc.fr/nf29/pr/contenu" id="top-article"><div id="meta-info"><fieldset><legend>Informations sur l'article</legend>
                    Date de création: <i>2010-11-15</i><br/>
                    Auteur: <i>Gérard Manvu</i><br/>
                    Modifié le: <i>2010-12-15</i><br/>
                    Dernier contributeur: <i>Edmond Secsarentrer<br/></i>
                    Relecteur: <i>Lenny Baralair</i><br/>
                    Statut:  <i>relu / complet</i></fieldset></div><h1>Unified Modeling Language</h1></div><div xmlns:cont="http://utc.fr/nf29/pr/contenu" id="article"><div id="partie"><h2>Le formalisme d'UML</h2><div id="sous-partie"><h3>Mise en œuvre d'une démarche à l'aide d'UML : les vues</h3>
                    
                        Une façon de mettre en œuvre UML est de considérer différentes vues qui peuvent se superposer pour collaborer à la définition du système :
                    <br/>
					<li id="n1">
							Vue des cas d'utilisation : c'est la description du modèle « vue » par les acteurs du système. Elle correspond aux besoins attendus par chaque acteur (c'est le QUOI et le QUI).
						</li>
					<li id="n1">
							Vue logique : c'est la définition du système vu de l'intérieur. Elle explique comment peuvent être satisfaits les besoins des acteurs (c'est le COMMENT).
						</li>
					<li id="n1">
							Vue d'implémentation : cette vue définit les dépendances entre les modules.
						</li>
					<li id="n1">
							Vue des processus : c'est la vue temporelle et technique, qui met en œuvre les notions de tâches concurrentes, stimuli, contrôle, synchronisation, etc.
						</li>
					<li id="n1">
							Vue de déploiement : cette vue décrit la position géographique et l'architecture physique de chaque élément du système (c'est le OÙ).
						</li>
                </div><div id="sous-partie"><h3>Les diagrammes</h3><div id="sous-sous-partie"><h4>Diagrammes structurels ou statiques</h4>
                    
                        Les diagrammes structurels ou statiques (Structure Diagram) rassemblent :
                    <br/>
					<li id="n1">
							Diagramme de classes (cf. Class diagram) : il représente les classes intervenant dans le système.
						</li>
					<li id="n1">
							Diagramme d'objets (cf. Object diagram) : il sert à représenter les instances de classes (objets) utilisées dans le système.
						</li>
                </div><div id="sous-sous-partie"><h4>Diagrammes comportementaux</h4>
                    
                        Les diagrammes comportementaux (Behavior Diagram) rassemblent :
                    <br/>
					<li id="n1">
							Diagramme des cas d'utilisation (use-cases) (cf. Use Case Diagram) : il permet d'identifier les possibilités d'interaction entre le système et les acteurs (intervenants extérieurs au système), c'est-à-dire toutes les fonctionnalités que doit fournir le système.
						</li>
					<li id="n1">
							Diagramme états-transitions (cf. State Machine Diagram) : permet de décrire sous forme de machine à états finis le comportement du système ou de ses composants.
						</li>
                </div></div></div><div id="partie"><h2>Standardisation et Certification UML</h2>
			
				UML n'est pas un standard de fait mais un standard « industriel » de l'OMG (novembre 1997) au même titre que CORBA par exemple. Ceci étant, vu le succès initial de ce langage, il aurait pu tout aussi bien être simplement « standard de fait ». Depuis juillet 2005, la première version 2.* de UML est validée par l'OMG.
				Par ailleurs, depuis 2003, l'OMG a mis en place un programme de certification à la pratique et la connaissance d'UML : OCUP (OMG Certified UML Professional), qui recouvre trois niveaux successifs de maîtrise.
			<br/>
		</div><div id="partie"><h2>Logiciels de modélisation UML</h2>
			
				Il existe de nombreux outils logiciels de modélisation UML. Malheureusement aucun d'entre eux ne respecte strictement aucune des versions de UML, particulièrement UML2 : beaucoup de ces outils introduisent des notations particulières non conformes, très peu supportent les différents types de diagrammes définis par le standard. Beaucoup en revanche incluent des outils de génération de squelette de code, particulièrement à partir du diagramme de classes, qui est celui qui se prête le mieux à une telle automatisation.
			<br/>
		</div><br/></div>
